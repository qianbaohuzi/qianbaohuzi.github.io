{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/Hacker/source/images/icon-heart.svg","path":"images/icon-heart.svg","modified":1,"renderable":1},{"_id":"themes/Hacker/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/Hacker/source/css/base/normalize.css","path":"css/base/normalize.css","modified":1,"renderable":1},{"_id":"themes/Hacker/source/css/components/archive.styl","path":"css/components/archive.styl","modified":1,"renderable":1},{"_id":"themes/Hacker/source/css/components/article.styl","path":"css/components/article.styl","modified":1,"renderable":1},{"_id":"themes/Hacker/source/css/components/footer.styl","path":"css/components/footer.styl","modified":1,"renderable":1},{"_id":"themes/Hacker/source/css/components/categories.styl","path":"css/components/categories.styl","modified":1,"renderable":1},{"_id":"themes/Hacker/source/css/components/header.styl","path":"css/components/header.styl","modified":1,"renderable":1},{"_id":"themes/Hacker/source/css/components/icon.styl","path":"css/components/icon.styl","modified":1,"renderable":1},{"_id":"themes/Hacker/source/css/components/layout.styl","path":"css/components/layout.styl","modified":1,"renderable":1},{"_id":"themes/Hacker/source/css/components/pagination.styl","path":"css/components/pagination.styl","modified":1,"renderable":1},{"_id":"themes/Hacker/source/css/components/syntax.styl","path":"css/components/syntax.styl","modified":1,"renderable":1},{"_id":"themes/Hacker/source/css/components/responsive.styl","path":"css/components/responsive.styl","modified":1,"renderable":1},{"_id":"themes/Hacker/source/css/components/tags.styl","path":"css/components/tags.styl","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/Window-10-安装-Docker-并使用-Postgre-数据库.md","hash":"b2a8848e9296a6d75772cf6fc0c46bc49c318925","modified":1713326625510},{"_id":"source/_posts/window10安装Hyper-V.md","hash":"f3c2f5ceff91e907c0aa59f34a02c8f7c369d4cb","modified":1712918360671},{"_id":"source/_posts/使用-Hexo-生成静态博客.md","hash":"d8989bb1f34f8c4cfc5484eeab66606176814f1e","modified":1713285038835},{"_id":"themes/Hacker/languages/default.yml","hash":"d4466fb0a6102e50777ee56957f78de696891a0e","modified":1662453582000},{"_id":"themes/Hacker/languages/zh-CN.yml","hash":"d822b531c8e0edd5e1ae85ac3de96017e4781b3f","modified":1662453582000},{"_id":"themes/Hacker/layout/archive.ejs","hash":"2238cbe29009aafb16969d2c70dceb3f71772123","modified":1662453582000},{"_id":"themes/Hacker/layout/categories.ejs","hash":"bfad4e7eade650c535f0194974e2646619657b8b","modified":1662453582000},{"_id":"themes/Hacker/layout/index.ejs","hash":"1d2c487a95d25e763b5f7e004194eb6ee6b18135","modified":1662453582000},{"_id":"themes/Hacker/layout/post.ejs","hash":"84e00bbcc643dff4bd02880b3bbea658f510835f","modified":1662453582000},{"_id":"themes/Hacker/layout/page.ejs","hash":"84e00bbcc643dff4bd02880b3bbea658f510835f","modified":1662453582000},{"_id":"themes/Hacker/layout/layout.ejs","hash":"1bd1ff49fb17548b934e0664ba6cefd60b086fa9","modified":1662453582000},{"_id":"themes/Hacker/layout/tags.ejs","hash":"ee89e6a9c14bdb5e5e8cf975a558c780fe8dabff","modified":1662453582000},{"_id":"themes/Hacker/layout/components/archive.ejs","hash":"1f79ebaf52b8229cf5c58bb8325cf0177859a05c","modified":1662453582000},{"_id":"themes/Hacker/layout/components/article.ejs","hash":"06dd5da86efddecedd26a998fa66c53c580867f0","modified":1662453582000},{"_id":"themes/Hacker/layout/components/baiduanalytics.ejs","hash":"75ea315908beaf390265e00167cf8a30b5d0d94a","modified":1662453582000},{"_id":"themes/Hacker/layout/components/categories.ejs","hash":"3665bf5d1c7181db22dc1c48d62ebf42757d8c27","modified":1662453582000},{"_id":"themes/Hacker/layout/components/comment.ejs","hash":"d1fffabbca58cbeb0ff33855fd1b7ea6079e82b3","modified":1662453582000},{"_id":"themes/Hacker/layout/components/header.ejs","hash":"929a8eafa278d49c2f41d3581e2608eca80d7856","modified":1662453582000},{"_id":"themes/Hacker/layout/components/footer.ejs","hash":"538795f4af3a98e824aefc4b68a1bcd210c091e9","modified":1662453582000},{"_id":"themes/Hacker/layout/components/head.ejs","hash":"10475fdfc513c9380f18d034e15b3b051c8e9269","modified":1662453582000},{"_id":"themes/Hacker/layout/components/pagination.ejs","hash":"4ab5e3b0239e467923a0f91c771bcc9ee7889cfe","modified":1662453582000},{"_id":"themes/Hacker/layout/components/googleanalytics.ejs","hash":"27e6906523eae89fed4a6e86ebb2ad614a25c647","modified":1662453582000},{"_id":"themes/Hacker/source/css/style.styl","hash":"208e5f6d010e4e2c5590dae5e4fca8de592d3ef1","modified":1662453582000},{"_id":"themes/Hacker/source/css/base/normalize.css","hash":"e58275a588bb631a37a2988145eea231ed23176b","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/archive.styl","hash":"3ebb7790a46587297966f200fb4fcdbba25269df","modified":1662453582000},{"_id":"themes/Hacker/source/images/icon-heart.svg","hash":"ec483e96c88eea013fd8ac71a34a875107397f43","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/footer.styl","hash":"80ef890252d31d3bbfe71740fdcfc54ae14cad8e","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/article.styl","hash":"f613fc6ed4dec8171bf7a03bd8878eaa995082bb","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/categories.styl","hash":"c67e20d60351295cb178b568af42d430f4bcc3e6","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/header.styl","hash":"fa5e6d715d288a327406df78225284c70530cb98","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/layout.styl","hash":"9c6e6bc00f377666f6815bc5e23438893357f8f6","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/syntax.styl","hash":"8c0d919322194dc295e5404bcd68949f962f88dc","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/responsive.styl","hash":"053e7ec4c22845422440660b7e1d6b0dea5b4fbd","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/pagination.styl","hash":"1cec6cb1835f99432cc5c6ba674782237fea4f95","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/tags.styl","hash":"684cf4eb4b8671476365e955dceebf096cc0e6ed","modified":1662453582000},{"_id":"themes/Hacker/source/css/components/icon.styl","hash":"8da3ff5b6cd1609fdfe0c564d47391367abc8808","modified":1662453582000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Window 10 安装 Docker 并使用 Postgre 数据库","date":"2024-04-17T03:03:29.000Z","_content":"### Windows 10 开启 wsl 2 并安装 Ubuntu 发行版\n\n- 查看 windows 10 系统信息, 使用 `cmd` 或 `PowerShell` 执行命令 `systeminfo`\n- `OS Version` 大于或等于 `19041 `，则可以使用 wsl2 安装 Docker , 如果小于该版本,可以考虑升级系统\n- 确认开启 `Hyper-v` 功能, 打开 `控制面板` -> `程序` -> `启用或关闭 window 功能` -> `Hyper-V`,勾选后重启电脑\n- 打开 `开始` ->  输入 `wsl`, 输入命令 `wsl --list --online` 查看可以安装的 linux 发行版本, 使用 `wsl --help` 查询其他命令\n- 安装 Ubuntu 发行版, 输入 `wsl --install -d Ubuntu`, 等待 Ubuntu 发行版安装完成\n- 调整 wsl 使用 `wsl2`, 输入 `wsl --set-default-version 2`\n\n### 安装 Docker 并集成 wsl 2\n- 打开 [下载页](https://docs.docker.com/desktop/install/windows-install/),下载 `Docker Desktop for Windows` 并安装\n- 安装完成后打开 Docker Desktop, `Settings` -> `Resources` -> `WSL intergration` 开启 Docker 和 wsl 的集成\n- 打开 wsl 终端, 查看 docker 版本, `docker --version`, 安装成功后会有版本信息, 如果命令执行失败,检查 `WSL intergration` 中是否没有开启 `Enable integration with additional distros` 项\n- wsl 安装 Docker 有两种方式 一种是直接在 wsl 中安装docker 使用 Linux 容器 , 另一种是 wsl 集成 Docker Desktop 使用 Window 容器\n- 可以参考 [win10利用WSL2安装docker的2种方式](https://zhuanlan.zhihu.com/p/148511634)\n\n### 在 wsl 2 中安装 postgre 镜像\n- 拉取镜像 `docker pull postgre`\n- 启动镜像的命令, \n  > $ docker run -d \\\n    --name some-postgres \\\n    -e POSTGRES_PASSWORD=mysecretpassword \\\n    -e PGDATA=/var/lib/postgresql/data/pgdata \\\n    -v /custom/mount:/var/lib/postgresql/data \\\n    postgres\n    -   --name 是指定启动的容器的名称 \n    -   -e POSTGRES_PASSWORD=mysecretpassword 表示初始化用户的密码为 mysecretpassword\n    -   -e PGDATA=/var/lib/postgresql/data/pgdata 表示指定数据库数据的位置，该位置为容器内的位置\n    -   -v /custom/mount:/var/lib/postgresql/data 将这个位置信息映射到容器外，防止容器关闭数据库文件消失\n- 注意\n  - 使用改命令,有个初始化用户 postgre, 需要使用上述的密码登录\n  - -v /custom/mount:/var/lib/postgresql/data 左边的路径需要为 wsl 2 中的目录,例如 /home/user/mount ,不能为 windows 下的盘符路径, D:/custom/mount。这里涉及两个文件系统的不同\n","source":"_posts/Window-10-安装-Docker-并使用-Postgre-数据库.md","raw":"---\ntitle: Window 10 安装 Docker 并使用 Postgre 数据库\ndate: 2024-04-17 11:03:29\ntags:\n---\n### Windows 10 开启 wsl 2 并安装 Ubuntu 发行版\n\n- 查看 windows 10 系统信息, 使用 `cmd` 或 `PowerShell` 执行命令 `systeminfo`\n- `OS Version` 大于或等于 `19041 `，则可以使用 wsl2 安装 Docker , 如果小于该版本,可以考虑升级系统\n- 确认开启 `Hyper-v` 功能, 打开 `控制面板` -> `程序` -> `启用或关闭 window 功能` -> `Hyper-V`,勾选后重启电脑\n- 打开 `开始` ->  输入 `wsl`, 输入命令 `wsl --list --online` 查看可以安装的 linux 发行版本, 使用 `wsl --help` 查询其他命令\n- 安装 Ubuntu 发行版, 输入 `wsl --install -d Ubuntu`, 等待 Ubuntu 发行版安装完成\n- 调整 wsl 使用 `wsl2`, 输入 `wsl --set-default-version 2`\n\n### 安装 Docker 并集成 wsl 2\n- 打开 [下载页](https://docs.docker.com/desktop/install/windows-install/),下载 `Docker Desktop for Windows` 并安装\n- 安装完成后打开 Docker Desktop, `Settings` -> `Resources` -> `WSL intergration` 开启 Docker 和 wsl 的集成\n- 打开 wsl 终端, 查看 docker 版本, `docker --version`, 安装成功后会有版本信息, 如果命令执行失败,检查 `WSL intergration` 中是否没有开启 `Enable integration with additional distros` 项\n- wsl 安装 Docker 有两种方式 一种是直接在 wsl 中安装docker 使用 Linux 容器 , 另一种是 wsl 集成 Docker Desktop 使用 Window 容器\n- 可以参考 [win10利用WSL2安装docker的2种方式](https://zhuanlan.zhihu.com/p/148511634)\n\n### 在 wsl 2 中安装 postgre 镜像\n- 拉取镜像 `docker pull postgre`\n- 启动镜像的命令, \n  > $ docker run -d \\\n    --name some-postgres \\\n    -e POSTGRES_PASSWORD=mysecretpassword \\\n    -e PGDATA=/var/lib/postgresql/data/pgdata \\\n    -v /custom/mount:/var/lib/postgresql/data \\\n    postgres\n    -   --name 是指定启动的容器的名称 \n    -   -e POSTGRES_PASSWORD=mysecretpassword 表示初始化用户的密码为 mysecretpassword\n    -   -e PGDATA=/var/lib/postgresql/data/pgdata 表示指定数据库数据的位置，该位置为容器内的位置\n    -   -v /custom/mount:/var/lib/postgresql/data 将这个位置信息映射到容器外，防止容器关闭数据库文件消失\n- 注意\n  - 使用改命令,有个初始化用户 postgre, 需要使用上述的密码登录\n  - -v /custom/mount:/var/lib/postgresql/data 左边的路径需要为 wsl 2 中的目录,例如 /home/user/mount ,不能为 windows 下的盘符路径, D:/custom/mount。这里涉及两个文件系统的不同\n","slug":"Window-10-安装-Docker-并使用-Postgre-数据库","published":1,"updated":"2024-04-17T04:03:45.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv3ag94j0000h4ha2scq7t6g","content":"<h3 id=\"Windows-10-开启-wsl-2-并安装-Ubuntu-发行版\"><a href=\"#Windows-10-开启-wsl-2-并安装-Ubuntu-发行版\" class=\"headerlink\" title=\"Windows 10 开启 wsl 2 并安装 Ubuntu 发行版\"></a>Windows 10 开启 wsl 2 并安装 Ubuntu 发行版</h3><ul>\n<li>查看 windows 10 系统信息, 使用 <code>cmd</code> 或 <code>PowerShell</code> 执行命令 <code>systeminfo</code></li>\n<li><code>OS Version</code> 大于或等于 <code>19041 </code>，则可以使用 wsl2 安装 Docker , 如果小于该版本,可以考虑升级系统</li>\n<li>确认开启 <code>Hyper-v</code> 功能, 打开 <code>控制面板</code> -&gt; <code>程序</code> -&gt; <code>启用或关闭 window 功能</code> -&gt; <code>Hyper-V</code>,勾选后重启电脑</li>\n<li>打开 <code>开始</code> -&gt;  输入 <code>wsl</code>, 输入命令 <code>wsl --list --online</code> 查看可以安装的 linux 发行版本, 使用 <code>wsl --help</code> 查询其他命令</li>\n<li>安装 Ubuntu 发行版, 输入 <code>wsl --install -d Ubuntu</code>, 等待 Ubuntu 发行版安装完成</li>\n<li>调整 wsl 使用 <code>wsl2</code>, 输入 <code>wsl --set-default-version 2</code></li>\n</ul>\n<h3 id=\"安装-Docker-并集成-wsl-2\"><a href=\"#安装-Docker-并集成-wsl-2\" class=\"headerlink\" title=\"安装 Docker 并集成 wsl 2\"></a>安装 Docker 并集成 wsl 2</h3><ul>\n<li>打开 <a href=\"https://docs.docker.com/desktop/install/windows-install/\">下载页</a>,下载 <code>Docker Desktop for Windows</code> 并安装</li>\n<li>安装完成后打开 Docker Desktop, <code>Settings</code> -&gt; <code>Resources</code> -&gt; <code>WSL intergration</code> 开启 Docker 和 wsl 的集成</li>\n<li>打开 wsl 终端, 查看 docker 版本, <code>docker --version</code>, 安装成功后会有版本信息, 如果命令执行失败,检查 <code>WSL intergration</code> 中是否没有开启 <code>Enable integration with additional distros</code> 项</li>\n<li>wsl 安装 Docker 有两种方式 一种是直接在 wsl 中安装docker 使用 Linux 容器 , 另一种是 wsl 集成 Docker Desktop 使用 Window 容器</li>\n<li>可以参考 <a href=\"https://zhuanlan.zhihu.com/p/148511634\">win10利用WSL2安装docker的2种方式</a></li>\n</ul>\n<h3 id=\"在-wsl-2-中安装-postgre-镜像\"><a href=\"#在-wsl-2-中安装-postgre-镜像\" class=\"headerlink\" title=\"在 wsl 2 中安装 postgre 镜像\"></a>在 wsl 2 中安装 postgre 镜像</h3><ul>\n<li>拉取镜像 <code>docker pull postgre</code></li>\n<li>启动镜像的命令, <blockquote>\n<p>$ docker run -d <br>  –name some-postgres <br>  -e POSTGRES_PASSWORD&#x3D;mysecretpassword <br>  -e PGDATA&#x3D;&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data&#x2F;pgdata <br>  -v &#x2F;custom&#x2F;mount:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data <br>  postgres</p>\n</blockquote>\n<ul>\n<li>–name 是指定启动的容器的名称 </li>\n<li>-e POSTGRES_PASSWORD&#x3D;mysecretpassword 表示初始化用户的密码为 mysecretpassword</li>\n<li>-e PGDATA&#x3D;&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data&#x2F;pgdata 表示指定数据库数据的位置，该位置为容器内的位置</li>\n<li>-v &#x2F;custom&#x2F;mount:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data 将这个位置信息映射到容器外，防止容器关闭数据库文件消失</li>\n</ul>\n</li>\n<li>注意<ul>\n<li>使用改命令,有个初始化用户 postgre, 需要使用上述的密码登录</li>\n<li>-v &#x2F;custom&#x2F;mount:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data 左边的路径需要为 wsl 2 中的目录,例如 &#x2F;home&#x2F;user&#x2F;mount ,不能为 windows 下的盘符路径, D:&#x2F;custom&#x2F;mount。这里涉及两个文件系统的不同</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Windows-10-开启-wsl-2-并安装-Ubuntu-发行版\"><a href=\"#Windows-10-开启-wsl-2-并安装-Ubuntu-发行版\" class=\"headerlink\" title=\"Windows 10 开启 wsl 2 并安装 Ubuntu 发行版\"></a>Windows 10 开启 wsl 2 并安装 Ubuntu 发行版</h3><ul>\n<li>查看 windows 10 系统信息, 使用 <code>cmd</code> 或 <code>PowerShell</code> 执行命令 <code>systeminfo</code></li>\n<li><code>OS Version</code> 大于或等于 <code>19041 </code>，则可以使用 wsl2 安装 Docker , 如果小于该版本,可以考虑升级系统</li>\n<li>确认开启 <code>Hyper-v</code> 功能, 打开 <code>控制面板</code> -&gt; <code>程序</code> -&gt; <code>启用或关闭 window 功能</code> -&gt; <code>Hyper-V</code>,勾选后重启电脑</li>\n<li>打开 <code>开始</code> -&gt;  输入 <code>wsl</code>, 输入命令 <code>wsl --list --online</code> 查看可以安装的 linux 发行版本, 使用 <code>wsl --help</code> 查询其他命令</li>\n<li>安装 Ubuntu 发行版, 输入 <code>wsl --install -d Ubuntu</code>, 等待 Ubuntu 发行版安装完成</li>\n<li>调整 wsl 使用 <code>wsl2</code>, 输入 <code>wsl --set-default-version 2</code></li>\n</ul>\n<h3 id=\"安装-Docker-并集成-wsl-2\"><a href=\"#安装-Docker-并集成-wsl-2\" class=\"headerlink\" title=\"安装 Docker 并集成 wsl 2\"></a>安装 Docker 并集成 wsl 2</h3><ul>\n<li>打开 <a href=\"https://docs.docker.com/desktop/install/windows-install/\">下载页</a>,下载 <code>Docker Desktop for Windows</code> 并安装</li>\n<li>安装完成后打开 Docker Desktop, <code>Settings</code> -&gt; <code>Resources</code> -&gt; <code>WSL intergration</code> 开启 Docker 和 wsl 的集成</li>\n<li>打开 wsl 终端, 查看 docker 版本, <code>docker --version</code>, 安装成功后会有版本信息, 如果命令执行失败,检查 <code>WSL intergration</code> 中是否没有开启 <code>Enable integration with additional distros</code> 项</li>\n<li>wsl 安装 Docker 有两种方式 一种是直接在 wsl 中安装docker 使用 Linux 容器 , 另一种是 wsl 集成 Docker Desktop 使用 Window 容器</li>\n<li>可以参考 <a href=\"https://zhuanlan.zhihu.com/p/148511634\">win10利用WSL2安装docker的2种方式</a></li>\n</ul>\n<h3 id=\"在-wsl-2-中安装-postgre-镜像\"><a href=\"#在-wsl-2-中安装-postgre-镜像\" class=\"headerlink\" title=\"在 wsl 2 中安装 postgre 镜像\"></a>在 wsl 2 中安装 postgre 镜像</h3><ul>\n<li>拉取镜像 <code>docker pull postgre</code></li>\n<li>启动镜像的命令, <blockquote>\n<p>$ docker run -d <br>  –name some-postgres <br>  -e POSTGRES_PASSWORD&#x3D;mysecretpassword <br>  -e PGDATA&#x3D;&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data&#x2F;pgdata <br>  -v &#x2F;custom&#x2F;mount:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data <br>  postgres</p>\n</blockquote>\n<ul>\n<li>–name 是指定启动的容器的名称 </li>\n<li>-e POSTGRES_PASSWORD&#x3D;mysecretpassword 表示初始化用户的密码为 mysecretpassword</li>\n<li>-e PGDATA&#x3D;&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data&#x2F;pgdata 表示指定数据库数据的位置，该位置为容器内的位置</li>\n<li>-v &#x2F;custom&#x2F;mount:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data 将这个位置信息映射到容器外，防止容器关闭数据库文件消失</li>\n</ul>\n</li>\n<li>注意<ul>\n<li>使用改命令,有个初始化用户 postgre, 需要使用上述的密码登录</li>\n<li>-v &#x2F;custom&#x2F;mount:&#x2F;var&#x2F;lib&#x2F;postgresql&#x2F;data 左边的路径需要为 wsl 2 中的目录,例如 &#x2F;home&#x2F;user&#x2F;mount ,不能为 windows 下的盘符路径, D:&#x2F;custom&#x2F;mount。这里涉及两个文件系统的不同</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Window10 安装 Hyper-V","date":"2024-04-12T06:05:32.000Z","_content":"\n### 环境\n打开命令行窗口，使用 `systeminfo` 命令查询\n- 操作系统名称: window 10 Enterprise LTSC\n- 版本: 10.0.17763 N/A Build 17763\n- Hyper-V 要求的条件均为是\n[![pFjZLdI.png](https://s21.ax1x.com/2024/04/12/pFjZLdI.png)](https://imgse.com/i/pFjZLdI)\n\n### 尝试\n根据[官方文档](https://learn.microsoft.com/zh-cn/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v)描述：\n\n1. 以管理员身份打开 PowerShell 控制台\n2. 运行以下命令\n`Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All`\n\n结果收到一个错误：\n\n[![pFjZjFP.png](https://s21.ax1x.com/2024/04/12/pFjZjFP.png)](https://imgse.com/i/pFjZjFP)\n\n感觉像是 17763 这个内部版本不支持 Hyper-V\n\n### 解决方案\n\n- 下载最新的系统 [Window 10 LTSC 2019](https://msdn.itellyou.cn/)\n- 挂载镜像，点击安装\n- 选择升级，并保留个人文件\n- 等待升级完成后，打开 `控制面板` -> `程序` -> `启用或关闭 window 功能` -> `Hyper-V`,勾选后重启电脑\n\n\n","source":"_posts/window10安装Hyper-V.md","raw":"---\ntitle: Window10 安装 Hyper-V\ndate: 2024-04-12 14:05:32\ntags:\n---\n\n### 环境\n打开命令行窗口，使用 `systeminfo` 命令查询\n- 操作系统名称: window 10 Enterprise LTSC\n- 版本: 10.0.17763 N/A Build 17763\n- Hyper-V 要求的条件均为是\n[![pFjZLdI.png](https://s21.ax1x.com/2024/04/12/pFjZLdI.png)](https://imgse.com/i/pFjZLdI)\n\n### 尝试\n根据[官方文档](https://learn.microsoft.com/zh-cn/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v)描述：\n\n1. 以管理员身份打开 PowerShell 控制台\n2. 运行以下命令\n`Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All`\n\n结果收到一个错误：\n\n[![pFjZjFP.png](https://s21.ax1x.com/2024/04/12/pFjZjFP.png)](https://imgse.com/i/pFjZjFP)\n\n感觉像是 17763 这个内部版本不支持 Hyper-V\n\n### 解决方案\n\n- 下载最新的系统 [Window 10 LTSC 2019](https://msdn.itellyou.cn/)\n- 挂载镜像，点击安装\n- 选择升级，并保留个人文件\n- 等待升级完成后，打开 `控制面板` -> `程序` -> `启用或关闭 window 功能` -> `Hyper-V`,勾选后重启电脑\n\n\n","slug":"window10安装Hyper-V","published":1,"updated":"2024-04-12T10:39:20.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv3ag94u0001h4ha9tjr0nww","content":"<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>打开命令行窗口，使用 <code>systeminfo</code> 命令查询</p>\n<ul>\n<li>操作系统名称: window 10 Enterprise LTSC</li>\n<li>版本: 10.0.17763 N&#x2F;A Build 17763</li>\n<li>Hyper-V 要求的条件均为是<br><a href=\"https://imgse.com/i/pFjZLdI\"><img src=\"https://s21.ax1x.com/2024/04/12/pFjZLdI.png\" alt=\"pFjZLdI.png\"></a></li>\n</ul>\n<h3 id=\"尝试\"><a href=\"#尝试\" class=\"headerlink\" title=\"尝试\"></a>尝试</h3><p>根据<a href=\"https://learn.microsoft.com/zh-cn/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v\">官方文档</a>描述：</p>\n<ol>\n<li>以管理员身份打开 PowerShell 控制台</li>\n<li>运行以下命令<br><code>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All</code></li>\n</ol>\n<p>结果收到一个错误：</p>\n<p><a href=\"https://imgse.com/i/pFjZjFP\"><img src=\"https://s21.ax1x.com/2024/04/12/pFjZjFP.png\" alt=\"pFjZjFP.png\"></a></p>\n<p>感觉像是 17763 这个内部版本不支持 Hyper-V</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ul>\n<li>下载最新的系统 <a href=\"https://msdn.itellyou.cn/\">Window 10 LTSC 2019</a></li>\n<li>挂载镜像，点击安装</li>\n<li>选择升级，并保留个人文件</li>\n<li>等待升级完成后，打开 <code>控制面板</code> -&gt; <code>程序</code> -&gt; <code>启用或关闭 window 功能</code> -&gt; <code>Hyper-V</code>,勾选后重启电脑</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>打开命令行窗口，使用 <code>systeminfo</code> 命令查询</p>\n<ul>\n<li>操作系统名称: window 10 Enterprise LTSC</li>\n<li>版本: 10.0.17763 N&#x2F;A Build 17763</li>\n<li>Hyper-V 要求的条件均为是<br><a href=\"https://imgse.com/i/pFjZLdI\"><img src=\"https://s21.ax1x.com/2024/04/12/pFjZLdI.png\" alt=\"pFjZLdI.png\"></a></li>\n</ul>\n<h3 id=\"尝试\"><a href=\"#尝试\" class=\"headerlink\" title=\"尝试\"></a>尝试</h3><p>根据<a href=\"https://learn.microsoft.com/zh-cn/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v\">官方文档</a>描述：</p>\n<ol>\n<li>以管理员身份打开 PowerShell 控制台</li>\n<li>运行以下命令<br><code>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All</code></li>\n</ol>\n<p>结果收到一个错误：</p>\n<p><a href=\"https://imgse.com/i/pFjZjFP\"><img src=\"https://s21.ax1x.com/2024/04/12/pFjZjFP.png\" alt=\"pFjZjFP.png\"></a></p>\n<p>感觉像是 17763 这个内部版本不支持 Hyper-V</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ul>\n<li>下载最新的系统 <a href=\"https://msdn.itellyou.cn/\">Window 10 LTSC 2019</a></li>\n<li>挂载镜像，点击安装</li>\n<li>选择升级，并保留个人文件</li>\n<li>等待升级完成后，打开 <code>控制面板</code> -&gt; <code>程序</code> -&gt; <code>启用或关闭 window 功能</code> -&gt; <code>Hyper-V</code>,勾选后重启电脑</li>\n</ul>\n"},{"title":"使用 Hexo 生成静态博客","date":"2024-04-15T03:07:26.000Z","_content":"#### 起因\n平时折腾过很多东西,但是时间长了都忘记了,每次用的时候都还需要再次去查资料,所以就想用博客记录一下自己平时折腾的东西\n\n#### 框架选择\n因为博客的内容主要是以记录为主,不需要动态加载之类的,倾向于选择可以生成静态页\n面的框架,然后使用 GitHub Pages 进行托管.\n\n> 选择 Hexo 是发现可以满足自己基本的要求\n\n查询 `Hexo` 的[官方文档](https://hexo.io/zh-cn/docs/),使用命令\n` npn install hexo-cli -g ` 将 `hexo-cli` 安装到本地\n> 需要安装 `nodejs` 和 `npm` ，在 window 中使用 `scoop` 进行安装管理\n\n#### 常用命令\n\n- `npx hexo g` 生成静态文件\n- `npx hexo server` 启动本地服务器\n\n#### GitHub Pages\n\n按照 [Hexo 的 GitHub Pages 托管文档](https://hexo.io/zh-cn/docs/github-pages) 将静态博客托管到 `GitHub Pages`","source":"_posts/使用-Hexo-生成静态博客.md","raw":"---\ntitle: 使用 Hexo 生成静态博客\ndate: 2024-04-15 11:07:26\ntags:\n---\n#### 起因\n平时折腾过很多东西,但是时间长了都忘记了,每次用的时候都还需要再次去查资料,所以就想用博客记录一下自己平时折腾的东西\n\n#### 框架选择\n因为博客的内容主要是以记录为主,不需要动态加载之类的,倾向于选择可以生成静态页\n面的框架,然后使用 GitHub Pages 进行托管.\n\n> 选择 Hexo 是发现可以满足自己基本的要求\n\n查询 `Hexo` 的[官方文档](https://hexo.io/zh-cn/docs/),使用命令\n` npn install hexo-cli -g ` 将 `hexo-cli` 安装到本地\n> 需要安装 `nodejs` 和 `npm` ，在 window 中使用 `scoop` 进行安装管理\n\n#### 常用命令\n\n- `npx hexo g` 生成静态文件\n- `npx hexo server` 启动本地服务器\n\n#### GitHub Pages\n\n按照 [Hexo 的 GitHub Pages 托管文档](https://hexo.io/zh-cn/docs/github-pages) 将静态博客托管到 `GitHub Pages`","slug":"使用-Hexo-生成静态博客","published":1,"updated":"2024-04-16T16:30:38.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clv3ag9570002h4ha7a8vcfiy","content":"<h4 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h4><p>平时折腾过很多东西,但是时间长了都忘记了,每次用的时候都还需要再次去查资料,所以就想用博客记录一下自己平时折腾的东西</p>\n<h4 id=\"框架选择\"><a href=\"#框架选择\" class=\"headerlink\" title=\"框架选择\"></a>框架选择</h4><p>因为博客的内容主要是以记录为主,不需要动态加载之类的,倾向于选择可以生成静态页<br>面的框架,然后使用 GitHub Pages 进行托管.</p>\n<blockquote>\n<p>选择 Hexo 是发现可以满足自己基本的要求</p>\n</blockquote>\n<p>查询 <code>Hexo</code> 的<a href=\"https://hexo.io/zh-cn/docs/\">官方文档</a>,使用命令<br><code>npn install hexo-cli -g</code> 将 <code>hexo-cli</code> 安装到本地</p>\n<blockquote>\n<p>需要安装 <code>nodejs</code> 和 <code>npm</code> ，在 window 中使用 <code>scoop</code> 进行安装管理</p>\n</blockquote>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><ul>\n<li><code>npx hexo g</code> 生成静态文件</li>\n<li><code>npx hexo server</code> 启动本地服务器</li>\n</ul>\n<h4 id=\"GitHub-Pages\"><a href=\"#GitHub-Pages\" class=\"headerlink\" title=\"GitHub Pages\"></a>GitHub Pages</h4><p>按照 <a href=\"https://hexo.io/zh-cn/docs/github-pages\">Hexo 的 GitHub Pages 托管文档</a> 将静态博客托管到 <code>GitHub Pages</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h4><p>平时折腾过很多东西,但是时间长了都忘记了,每次用的时候都还需要再次去查资料,所以就想用博客记录一下自己平时折腾的东西</p>\n<h4 id=\"框架选择\"><a href=\"#框架选择\" class=\"headerlink\" title=\"框架选择\"></a>框架选择</h4><p>因为博客的内容主要是以记录为主,不需要动态加载之类的,倾向于选择可以生成静态页<br>面的框架,然后使用 GitHub Pages 进行托管.</p>\n<blockquote>\n<p>选择 Hexo 是发现可以满足自己基本的要求</p>\n</blockquote>\n<p>查询 <code>Hexo</code> 的<a href=\"https://hexo.io/zh-cn/docs/\">官方文档</a>,使用命令<br><code>npn install hexo-cli -g</code> 将 <code>hexo-cli</code> 安装到本地</p>\n<blockquote>\n<p>需要安装 <code>nodejs</code> 和 <code>npm</code> ，在 window 中使用 <code>scoop</code> 进行安装管理</p>\n</blockquote>\n<h4 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h4><ul>\n<li><code>npx hexo g</code> 生成静态文件</li>\n<li><code>npx hexo server</code> 启动本地服务器</li>\n</ul>\n<h4 id=\"GitHub-Pages\"><a href=\"#GitHub-Pages\" class=\"headerlink\" title=\"GitHub Pages\"></a>GitHub Pages</h4><p>按照 <a href=\"https://hexo.io/zh-cn/docs/github-pages\">Hexo 的 GitHub Pages 托管文档</a> 将静态博客托管到 <code>GitHub Pages</code></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}